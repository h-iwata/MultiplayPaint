* release_history-loadBalancing-cpp.txt
* Release history for the Exit Games LoadBalancing C++ Client Library

(C) 2004-2015 Exit Games GmbH, http://www.exitgames.com

Questions? Write to developer@exitgames.com or visit forum.exitgames.com


*** version 4.0.2.0
	Date: 04-09-2015
	- fixed: requesting in the constructor of class Client to get a lobbyStats update on initial connect and whenever the client would leaver a room did not work correctly
	- removed: class LobbyStats
	- added: class LobbyStatsRequest
	- added: class LobbyStatsResponse


*** version 4.0.0.3
	Date: 01-20-2015
	- fixed: leaving game rooms still did not work properly when they Client has not connected to a nameserver, but directly to a masterserver


*** version 4.0.0.2
	Date: 01-15-2015
	- fixed: the functionality of leaving game rooms has been broken from 4.0.0.0 onwards


*** version 4.0.0.1
	Date: 01-13-2015
	- fixed: logging performance issue in Client:OnEvent()


*** version 4.0.0.0
	Date: 11-11-2014
	- changed: the constuctors of classes Client and Peer now take a value of the new ConnectionProtocol enumeration as parameter instead of the old bool parameter "useTCP"
	- added: optional parameters "lobbyName" and "lobbyType" to Peer::opJoinLobby()
	- added: optional parameters "lobbyName", "lobbyType", "playerTtl" and "emptyRoomTtl" to Peer::opCreateRoom()
	- added: optional parameters "createIfNotExists", "playerNumber", "cacheSliceIndex", "playerTtl" and "emptyRoomTtl" to Peer::opJoinRoom()
	- added: optional parameters "matchmakingMode", "lobbyName", "lobbyType" and "sqlLobbyFilter" to Peer:opJoinRandomRoom()
	- added: Peer::opLobbyStats()
	- added: Peer::opChangeGroups()
	- added: Client::getDisconnectedCause()
	- added: Listener::onLobbyStatsResponse()
	- added: Listener::onLobbyStatsUpdate()
	- added: optional parameter "lobbyStats" to Peer::opAuthenticate()
	- added: optional paramters "interestGroup", "forwardToWebhook" and "cacheSliceIndex" to Peer::opRaiseEvent()
	- added: constructor overload for class AuthenticationValues, taking parameters optional parameters "type", "parameters" and "data"
	- added: optional parameter "autoLobbyStats" to constructor of class Client
	- added: class LobbyStats
	- added: Player::getIsInactive()
	- added: MutableRoom::getPlayerTtl()
	- added: MutableRoom::getRoomTtl()
	- added: Peer::opWebRpc()
	- added: new parameter "isInactive" to Listener::leaveRoomEventAction()
	- added: Listener::disconnectEventAction()
	- added: Listener::webRpcReturn()
	- added: Listener::onCacheSliceChanged()
	- added: optional parameter "webForward" to MutableRoom::mergeCustomProperties()
	- added: optional parameter "webForward" to MutableRoom::addCustomProperty()
	- added: optional parameter "webForward" to MutableRoom::addCustomProperties()
	- added: optional parameter "webForward" to MutableRoom::removeCustomProperty()
	- added: optional parameter "webForward" to MutableRoom::removeCustomProperties()
	- changed: class Client is no longer a subclass of class Peer, but instead now contains a Peer instance, all previously inherited public API of the Peer that still makes sense for a Client is now avaiable in the form of wrapper functions
	- fixed: Client::getIsInLobby() has not returned the correct value when getting called inside Listener::connectReturn() or Listener::joinLobbyReturn()


*** version 3.2.5.4
	Date: 09-03-2014
	- fixed: removed printout of payload of received operation responses in Client::onOperationResponse(), as its' too expensive for big messages
	- fixed: reverted the accidental reintroduction of the printout of the payload for received events in Client::onEvent()
	- fixed: the Peer::opRaiseEvent() overload for 1D arrays now accepts an int for the size parameter instead of a short, when the array element type is nByte


*** version 3.2.5.3
	Date: 02-04-2014
	- fixed: when a client attempted to join a room which got shut down just while the client has been in transition from the master server to the game server, the client got stuck in a state of trying to join forever
	- fixed: v3.2.5.0 has introduced a crash bug that could happen under certain circumstances when receiving room list updates
	- fixed: v3.2.5.0 has introduced a bug that a call to Client::connect() would reset the local players name to the value that has been passed to the clients constructor, even if it has been updated by a call to Client::getLocalPlayer()::setName() in the meantime
	- fixed: Room::toString() ignored the value passed for the "withTypes" flag and misinterpreted the value passed for the "withCustomProperties" flag as if it would be the value for the "withTypes" one
	- fixed: server side updates about the player properties of remote players did not get honored by the client, if they did not contain an update of the player name property


*** version 3.2.5.2
	Date: 01-17-2014
	- fixed: the Peer::opRaiseEvent() overload for multi dimensional arrays has not been const correct


*** version 3.2.5.0
	Date: 09-27-2013
	- changed: instances of Room, MutableRoom, Player and MutablePlayer now get constructed via factory functions, so that they can get subclassed by the app and the lib will then correctly create subclass instances - override MutableRoom:createPlayer() when subclassing Player, Client::getMutablePlayerFactory() + MutablePlayerFactory::create() + MutablePlayerFactory::destroy() when subclassing MutablePlayer, Client::createRoom() when subclassing Room and Client::getMutableRoomFactory() + MutableRoomFactory::create() + MutableRoomFactory::destroy() when subclassing MutableRoom
	- moved: classes MutablePlayer and MutableRoom into their own files separated from their immutable base classes
	- renamed: removed the project name prefix from all source and header files, in which it has been contained
	- added: CustomAuthentication support
	- fixed: setting player properties while being inside a room now actually works
	- changed: MutableRoom::getPlayers() now returns a const Common::JVector<Player*>& instead of a const Common::JVector<Player>
	- fixed: the entry for the local player in MutableRoom::getPlayers() now points directly to the same object, that also gets returned by Client::getLocalPlayer(), instead of holding a copy of that object, this avoids issues caused by missing synchronizations between two different copies
	- fixed: Room::getPlayerCount() has not been working when called on an instance of Rooms subclass MutableRoom
	- added: parameterless optional callback Listener::onFindFriendsResponse(), which gets called when a friend list fetching operation has been finished so that the app knows, when Client::getFriendList() will be able to successfully return the fetched values


*** version 3.2.4.0
	Date: 08-01-2013
	- added: parameter playerNr to Listener::onPlayerPropertiesChange()


*** version 3.2.3.2
	Date: 07-26-2013
	- fixed: entering or leaving rooms has erroneously erased the local players custom properties


*** version 3.2.3.0
	Date: 07-08-2013
	- changed: the signature of Peer::opRaiseEvent(), which now accepts every type as payload that is supported by Photons serialization, including (multi-dimensional) arrays, custom types and so on
	- changed: Peer::opRaiseEvent() doesn't provide different overloads for targetActorNumbers and eventCaching + ReceiverGroup anymore, but the first one doesn't rule out the other 2 anymore and vice versa, so if you are using these parameters, please adjust your calls to the changes in the parameter order


*** version 3.2.2.0
	Date: 05-06-2013
	- fixed: player properties have not been updated correctly, if the received update data has just contained a single player
	- added: optional callback Listener::onRoomListUpdate()
	- added: optional callback Listener::onRoomPropertiesChange()
	- added: optional callback Listener::onPlayerPropertiesChange()
	- added: optional callback Listener::onAppStatsUpdate()
	- removed: optional parameter customLocalPlayerProperties from Client::opCreateRoom(), Client::opJoinRoom() and Client::opJoinRandomRoom(); you should set custom local player properties through the reference that gets returned by Client::getLocalPlayer() instead
	- moved: local player access from MutableRoom to Client, as this way its more obvious, that local player poperties are not affected by joining or leaving rooms, but can be set in and outside of rooms and don't get reseted when switching rooms
	- added: Client::opFindFriends()
	- added: Client::getFriendList()
	- added: Client::gerFriendListAge()
	- added: class FriendInfo
	- added: Peer::opFindFriends()
	- added: new optional parameter userID to Peer::opAuthenticate()
	- fixed: the optional parameter targetActors of Peer::opRaiseEvent() is now const-correct


*** version 3.2.0.0
	Date: 02-25-2012
	- optimized: all dynamic memory allocations now go through a custom memory manager, that is based on several memory pools, instead of direct calls to malloc/new/new[], internally these MemoryPools allocate chunks with increasing amounts of blocks per new nByte[]
	- changed: Peer::Peer()'s first parameter from a non-const Photon::PhotonListener* to a const Photon::PhotonListener&
	- changed: Listener now inherits from Common::BaseListener instead of Photon::PhotonBaseListener
	- fixed: MutablePlayer::operator=() now behaves polymorphically correct
	- fixed: MutableRoom::operator=() now behaves polymorphically correct
	- fixed: when leaving a game, leaveRoomReturn() is now called, after v3.0.0.1 has introduced the bug that connectReturn() has accidentally been called instead


*** version 3.0.4.3
	Date: 01-14-2013
	- fixed: Room::getPlayerCount() now returns correct values


*** version 3.0.4.0
	Date: 10-11-2012
	- changed: removed the printout of the payload for received events in Client::onEvent(), as for events with a size of several kb stringifying the payload can get REALLY expensive
	- changed: static classes ErrorCode, EventCode, JoinType, OperationCode, ParameterCode, Properties::Player and Properties::Room into being namespaces with the same name, so that their static const members are stored at an addressable memory location
	- changed: after calling connectionErrorReturn() class Client will trigger a disconnect, if the client is not already disconnected or disconnecting, so that the app has not to call disconnect() itself anymore, before its able to reconnect in case of a connection error
	- fixed: assignments between instances of MutablePlayer, that are referenced by or pointed to a Player& or Player* now work polymorphically correct
	- fixed: assignments between instances of MutableRoom, that are referenced by or pointed to a Room& or Room* now work polymorphically correct
	- fixed: Peer::opRaiseEventImplementation() showed undefined behavior, when the caller passed anything else than NULL and 0 for parameters targetPlayers and numTargetPlayers


*** version 3.0.3.7
	Date: 08-31-2012
	- fixed: maxPlayers have not been passed to the gameserver, which lead into game rooms being created with the specified maxPlayers setting on the master-, but always with the default maxPlayers setting on the gameserver, therefor also filtering for maxPlayer in Client::opJoinRandomRoom() has not been working


*** version 3.0.3.1
	Date: 05-15-2012
	- changed: the lib can now be used by apps, that are build with stlport, not only by the ones, which are using gnulibstdc++ anymore


*** version 3.0.3.0
	Date: 04-12-2012
	- changed: the debugout at the start of Client::onEvent() now gets printed with debuglevel INFO, not with ALL anymore
	- changed: the datatype of Client::opCreateRoom()'s recently added parameter "propsListedinLobby" from JVector<Object> to JVector<JString> 
	- changed: the datatype of Room.mPropsListedinLobby and the according getter and setter from JVector<Object> to JVector<JString>
	- fixed: made Listener's destructor virtual for correct cleanup logic
	- removed: player properties from Peer::opJoinRandomRoom(), as it is only unneeded overhead to send them to server within this function, as it is only called for the master, but only the gameserver will actually react to them, so Peer:opJoinRoom() will (and has to) care about player properties for random rooms, too
	- changed: Peer::opAuthenticate() now passes false for withTypes, when printing out the opRequest
	- changed: Client::opCreateRoom() isn't sending room properties and list of props to show in lobby, anymore, when being called on master, to optimize bandwith usage, as only the gameserver will honor them, anyway
	- fixed: Client::opCreateRoom() and Client::opJoinRoom have not been sending the custom local player properties at all
	- changed: Client::onEvent() now passes false for withTypes, when printing out the event
	- fixed: MutableRoom::removePlayer() now correctly reassigns the master client id, when the player to remove has been the master client


*** version 3.0.2.1
	Date: 03-22-2012
	- removed: authentication timeout code, as do to server side improvements it is not needed anymore


*** version 3.0.1.2
	Date: 03-16-2012
	- fixed: a bug, which has been triggering wrong encryption/authentication timeouts


*** version 3.0.1.0
	Date: 03-08-2012
	- added: support for android ndk as new platform
	- added: optional parameter propertiesListedInLobby to Client::opCreateRoom()
	- addded: optional parameter customLocalPlayerProperties to Client::opJoinRandomRoom()
	- added: optional parameter propertiesListedInLobby to Peer::opCreateRoom()
	- addded: optional parameters customLocalPlayerProperties and playername to Peer::opJoinRandomRoom()
	- changed: Player now inherits from Base
	- changed: Room now inherits from Base
	- added: MutablePlayer::getIsMasterClient()
	- added: MutableRoom::getMasterClientID()
	- added: MutableRoom::getPropsListedInLobby()
	- added: MutableRoom:setPropsListedInLobby()
	- changed: players now cleanup their server side event caches on leaving a room
	- changed: subclasses of Room now print their own classname in toString(), not "Room" anymore
	- changed: subclasses of Player now print their own classname in toString(), not "Player" anymore
	- added: new members masterclientID and optional optionally propsPrintedInLobby are now included by the output of MutableRoom::toString()


*** version 3.0.0.1
	Date: 02-14-2012
	- fixed: the autoJoinLobby flag has accidentally been ignored, when coming back from gameserver
	- fixed: removing of rooms from the roomlist has not been working correctly


*** version 3.0.0.0
	Date: 02-09-2012
	- added: additional flags to MutableRoom::toString() to print out the localPlayer and the list of players curently in the room
	- changed: the return value of Client::getCurrentlyJoinedRoom() isn't const anymore, so you now can use the setters on it, like it is intended
	- removed: MutablePlayer::setCustomProperties()
	- added: MutablePlayer::mergeCustomProperties()
	- added: MutablePlayer::addCustomProperty()
	- added: MutablePlayer::addCustomProperties()
	- added: MutablePlayer::removeCustomProperty()
	- added: MutablePlayer::removeCustomProperties()
	- removed: MutableRoom::setCustomProperties()
	- added: MutableRoom::mergeCustomProperties()
	- added: MutableRoom::addCustomProperty()
	- added: MutableRoom::addCustomProperties()
	- added: MutableRoom::removeCustomProperty()
	- added: MutableRoom::removeCustomProperties()
	- fixed: the name of the local player has got messed up, when joining, leaving and rejoining a room
	- moved: Client::getLocalPlayer() to MutableRoom
	- moved: Client::getPlayers() to MutableRoom
	- added: MutableRoom::getPlayerForNumber()
	- changed: Room::addProperties() and Player::addProperties() are now virtual


*** version 3.0.0.0.RC4
	Date: 01-30-2012
	- initial version of the LoadBalancing C++ Library